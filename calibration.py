import numpy as np

M1 = np.array([[-0.18, 0, 0.98, 928.232],
      [0.01, 1, 0, 8.509],
      [-0.98, 0.01, -0.18, 392.979],
      [0, 0, 0, 1]])

M1_inv = np.linalg.inv(M1)

M2 = np.array([[-0.24, -0.18, 0.95, 889.02],
      [0.28, 0.93, 0.25, 226.827],
      [-0.93, 0.33, -0.17, 173.287],
      [0, 0, 0, 1]])

M2_inv = np.linalg.inv(M2)

N1 = np.array([[-0.13, 0.4, -1, -36.3],
      [-0.05, -1, -0.03, -175.7],
      [-1, 0.04, 0.13, -1285.77],
               [0, 0, 0, 1]])

N2 = np.array([[-0.12, -0.23, -0.97, 173.64],
      [-0.32, -0.91, 0.26, 53.77],
      [-0.94, 0.34, 0.03, -1320.49],
               [0, 0, 0, 1]])


a = np.array([[M1_inv[0][0] * N1[0][0], M1_inv[0][1] * N1[0][0], M1_inv[0][2] * N1[0][0], M1_inv[0][0] * N1[1][0], M1_inv[0][1] * N1[1][0], M1_inv[0][2] * N1[1][0], M1_inv[0][0] * N1[2][0], M1_inv[0][1] * N1[2][0], M1_inv[0][2] * N1[2][0], 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [M1_inv[1][0] * N1[0][0], M1_inv[1][1] * N1[0][0], M1_inv[1][2] * N1[0][0], M1_inv[1][0] * N1[1][0], M1_inv[1][1] * N1[1][0], M1_inv[1][2] * N1[1][0], M1_inv[1][0] * N1[2][0], M1_inv[1][1] * N1[2][0], M1_inv[1][2] * N1[2][0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [M1_inv[2][0] * N1[0][0], M1_inv[2][1] * N1[0][0], M1_inv[2][2] * N1[0][0], M1_inv[2][0] * N1[1][0], M1_inv[2][1] * N1[1][0], M1_inv[2][2] * N1[1][0], M1_inv[2][0] * N1[2][0], M1_inv[2][1] *N1[2][0], M1_inv[2][2] * N1[2][0], 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],

              [M1_inv[0][0] * N1[0][1], M1_inv[0][1] * N1[0][1], M1_inv[0][2] * N1[0][1], M1_inv[0][0] * N1[1][1], M1_inv[0][1] * N1[1][1], M1_inv[0][2] * N1[1][1], M1_inv[0][0] * N1[2][1], M1_inv[0][1] * N1[2][1], M1_inv[0][2] * N1[2][1], 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
              [M1_inv[1][0] * N1[0][1], M1_inv[1][1] * N1[0][1], M1_inv[1][2] * N1[0][1], M1_inv[1][0] * N1[1][1], M1_inv[1][1] * N1[1][1], M1_inv[1][2] * N1[1][1], M1_inv[1][0] * N1[2][1], M1_inv[1][1] * N1[2][1], M1_inv[1][2] * N1[2][1], 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [M1_inv[2][0] * N1[0][1], M1_inv[2][1] * N1[0][1], M1_inv[2][2] * N1[0][1], M1_inv[2][0] * N1[1][1], M1_inv[2][1] * N1[1][1], M1_inv[2][2] * N1[1][1], M1_inv[2][0] * N1[2][1], M1_inv[2][1] * N1[2][1], M1_inv[2][2] * N1[2][1], 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],

              [M1_inv[0][0] * N1[0][2], M1_inv[0][1] * N1[0][2], M1_inv[0][2] * N1[0][2], M1_inv[0][0] * N1[1][2], M1_inv[0][1] * N1[1][2], M1_inv[0][2] * N1[1][2], M1_inv[0][0] * N1[2][2], M1_inv[0][1] * N1[2][2], M1_inv[0][2] * N1[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [M1_inv[1][0] * N1[0][2], M1_inv[1][1] * N1[0][2], M1_inv[1][2] * N1[0][2], M1_inv[1][0] * N1[1][2], M1_inv[1][1] * N1[1][2], M1_inv[1][2] * N1[1][2], M1_inv[1][0] * N1[2][2], M1_inv[1][1] * N1[2][2], M1_inv[1][2] * N1[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
              [M1_inv[2][0] * N1[0][2], M1_inv[2][1] * N1[0][2], M1_inv[2][2] * N1[0][2], M1_inv[2][0] * N1[1][2], M1_inv[2][1] * N1[1][2], M1_inv[2][2] * N1[1][2], M1_inv[2][0] * N1[2][2], M1_inv[2][1] * N1[2][2], M1_inv[2][2] * N1[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],

              [M1_inv[0][0] * N1[0][3], M1_inv[0][1] * N1[0][3], M1_inv[0][2] * N1[0][3], M1_inv[0][0] * N1[1][3], M1_inv[0][1] * N1[1][3], M1_inv[0][2] * N1[1][3], M1_inv[0][0] * N1[2][3], M1_inv[0][1] * N1[2][3], M1_inv[0][2] * N1[2][3], M1_inv[0][0], M1_inv[0][1], M1_inv[0][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
              [M1_inv[1][0] * N1[0][3], M1_inv[1][1] * N1[0][3], M1_inv[1][2] * N1[0][3], M1_inv[1][0] * N1[1][3], M1_inv[1][1] * N1[1][3], M1_inv[1][2] * N1[1][3], M1_inv[1][0] * N1[2][3], M1_inv[1][1] * N1[2][3], M1_inv[1][2] * N1[2][3], M1_inv[1][0], M1_inv[1][1], M1_inv[1][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
              [M1_inv[2][0] * N1[0][3], M1_inv[2][1] * N1[0][3], M1_inv[2][2] * N1[0][3], M1_inv[2][0] * N1[1][3], M1_inv[2][1] * N1[1][3], M1_inv[2][2] * N1[1][3], M1_inv[2][0] * N1[2][3], M1_inv[2][1] * N1[2][3], M1_inv[2][2] * N1[2][3], M1_inv[2][0], M1_inv[2][1], M1_inv[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],





              [M2_inv[0][0] * N2[0][0], M2_inv[0][1] * N2[0][0], M2_inv[0][2] * N2[0][0], M2_inv[0][0] * N2[1][0], M2_inv[0][1] * N2[1][0], M2_inv[0][2] * N2[1][0], M2_inv[0][0] * N2[2][0], M2_inv[0][1] * N2[2][0], M2_inv[0][2] * N2[2][0], 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [M2_inv[1][0] * N2[0][0], M2_inv[1][1] * N2[0][0], M2_inv[1][2] * N2[0][0], M2_inv[1][0] * N2[1][0], M2_inv[1][1] * N2[1][0], M2_inv[1][2] * N2[1][0], M2_inv[1][0] * N2[2][0], M2_inv[1][1] * N2[2][0], M2_inv[1][2] * N2[2][0], 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
              [M2_inv[2][0] * N2[0][0], M2_inv[2][1] * N2[0][0], M2_inv[2][2] * N2[0][0], M2_inv[2][0] * N2[1][0], M2_inv[2][1] * N2[1][0], M2_inv[2][2] * N2[1][0], M2_inv[2][0] * N2[2][0], M2_inv[2][1] * N2[2][0], M2_inv[2][2] * N2[2][0], 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],

              [M2_inv[0][0] * N2[0][1], M2_inv[0][1] * N2[0][1], M2_inv[0][2] * N2[0][1], M2_inv[0][0] * N2[1][1], M2_inv[0][1] * N2[1][1], M2_inv[0][2] * N2[1][1], M2_inv[0][0] * N2[2][1], M2_inv[0][1] * N2[2][1], M2_inv[0][2] * N2[2][1], 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
              [M2_inv[1][0] * N2[0][1], M2_inv[1][1] * N2[0][1], M2_inv[1][2] * N2[0][1], M2_inv[1][0] * N2[1][1], M2_inv[1][1] * N2[1][1], M2_inv[1][2] * N2[1][1], M2_inv[1][0] * N2[2][1], M2_inv[1][1] * N2[2][1], M2_inv[1][2] * N2[2][1], 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
              [M2_inv[2][0] * N2[0][1], M2_inv[2][1] * N2[0][1], M2_inv[2][2] * N2[0][1], M2_inv[2][0] * N2[1][1], M2_inv[2][1] * N2[1][1], M2_inv[2][2] * N2[1][1], M2_inv[2][0] * N2[2][1], M2_inv[2][1] * N2[2][1], M2_inv[2][2] * N2[2][1], 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],

              [M2_inv[0][0] * N2[0][2], M2_inv[0][1] * N2[0][2], M2_inv[0][2] * N2[0][2], M2_inv[0][0] * N2[1][2], M2_inv[0][1] * N2[1][2], M2_inv[0][2] * N2[1][2], M2_inv[0][0] * N2[2][2], M2_inv[0][1] * N2[2][2], M2_inv[0][2] * N2[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
              [M2_inv[1][0] * N2[0][2], M2_inv[1][1] * N2[0][2], M2_inv[1][2] * N2[0][2], M2_inv[1][0] * N2[1][2], M2_inv[1][1] * N2[1][2], M2_inv[1][2] * N2[1][2], M2_inv[1][0] * N2[2][2], M2_inv[1][1] * N2[2][2], M2_inv[1][2] * N2[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
              [M2_inv[2][0] * N2[0][2], M2_inv[2][1] * N2[0][2], M2_inv[2][2] * N2[0][2], M2_inv[2][0] * N2[1][2], M2_inv[2][1] * N2[1][2], M2_inv[2][2] * N2[1][2], M2_inv[2][0] * N2[2][2], M2_inv[2][1] * N2[2][2], M2_inv[2][2] * N2[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],

              [M2_inv[0][0] * N2[0][3], M2_inv[0][1] * N2[0][3], M2_inv[0][2] * N2[0][3], M2_inv[0][0] * N2[1][3], M2_inv[0][1] * N2[1][3], M2_inv[0][2] * N2[1][3], M2_inv[0][0] * N2[2][3], M2_inv[0][1] * N2[2][3], M2_inv[0][2] * N2[2][3], M2_inv[0][0], M2_inv[0][1], M2_inv[0][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
              [M2_inv[1][0] * N2[0][3], M2_inv[1][1] * N2[0][3], M2_inv[1][2] * N2[0][3], M2_inv[1][0] * N2[1][3], M2_inv[1][1] * N2[1][3], M2_inv[1][2] * N2[1][3], M2_inv[1][0] * N2[2][3], M2_inv[1][1] * N2[2][3], M2_inv[1][2] * N2[2][3], M2_inv[1][0], M2_inv[1][1], M2_inv[1][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
              [M2_inv[2][0] * N2[0][3], M2_inv[2][1] * N2[0][3], M2_inv[2][2] * N2[0][3], M2_inv[2][0] * N2[1][3], M2_inv[2][1] * N2[1][3], M2_inv[2][2] * N2[1][3], M2_inv[2][0] * N2[2][3], M2_inv[2][1] * N2[2][3], M2_inv[2][2] * N2[2][3], M2_inv[2][0], M2_inv[2][1], M2_inv[2][2], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],

              ])

b = np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, -M1[0][3], -M1[1][3], -M1[2][3], 0, 0, 0, 0, 0, 0, 0, 0, 0, -M2[0][3], -M2[1][3], -M2[2][3]])

det = np.linalg.det(a)
print("det = ", det)

ranka = np.linalg.matrix_rank(a)
print("rank a = ", ranka)

w = np.linalg.solve(a, b)
print("w = ", w)

rankw = np.linalg.matrix_rank(w)
print("rank w = ", rankw) #rang von w = 1, darum ist w vektor


# Gleichungen nur Vorfaktoren
#a = np.array([[3, 1], [1, 2]])

# Ergebnisse Gleichungen
#b = np.array([9,8])

#x = np.linalg.solve(a,b)
#print(x)
